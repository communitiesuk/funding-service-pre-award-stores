"""Creating assessment store tables

Revision ID: 004_create_assessment_store
Revises: 003_create_application_store
Create Date: 2024-12-02 12:20:57.830366

"""

import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_extension import PGExtension
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "004_create_assessment_store"
down_revision = "003_create_application_store"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_pg_trgm = PGExtension(schema="public", signature="pg_trgm")
    op.create_entity(public_pg_trgm)

    op.create_table(
        "assessment_records",
        sa.Column("application_id", sa.UUID(), nullable=False),
        sa.Column("short_id", sa.String(length=255), nullable=False),
        sa.Column("type_of_application", sa.String(length=255), nullable=False),
        sa.Column("project_name", sa.String(length=255), nullable=False),
        sa.Column("funding_amount_requested", sa.Float(), nullable=False),
        sa.Column("round_id", sa.UUID(), nullable=False),
        sa.Column("fund_id", sa.UUID(), nullable=False),
        sa.Column("language", postgresql.ENUM("en", "cy", name="language", create_type=False), nullable=True),
        sa.Column(
            "workflow_status",
            postgresql.ENUM("NOT_STARTED", "IN_PROGRESS", "SUBMITTED", "COMPLETED", name="status", create_type=False),
            nullable=True,
        ),
        sa.Column("jsonb_blob", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column(
            "application_json_md5",
            sa.TEXT(),
            sa.Computed("md5(CAST(jsonb_blob AS TEXT))", persisted=True),
            nullable=True,
        ),
        sa.Column("asset_type", sa.String(length=255), nullable=False),
        sa.Column("location_json_blob", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("is_withdrawn", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("application_id", name=op.f("pk_assessment_records")),
    )
    with op.batch_alter_table("assessment_records", schema=None) as batch_op:
        batch_op.create_index("ix_application_id_hash", ["application_id"], unique=False, postgresql_using="hash")
        batch_op.create_index(
            "ix_application_jsonb",
            ["jsonb_blob"],
            unique=False,
            postgresql_ops={"jsonb_blob": "jsonb_path_ops"},
            postgresql_using="gin",
        )
        batch_op.create_index("ix_application_round_fund_id", ["round_id", "fund_id"], unique=False)
        batch_op.create_index(batch_op.f("ix_assessment_records_asset_type"), ["asset_type"], unique=False)
        batch_op.create_index(batch_op.f("ix_assessment_records_fund_id"), ["fund_id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_assessment_records_funding_amount_requested"), ["funding_amount_requested"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_assessment_records_project_name"), ["project_name"], unique=False)
        batch_op.create_index(batch_op.f("ix_assessment_records_round_id"), ["round_id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_assessment_records_type_of_application"), ["type_of_application"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_assessment_records_workflow_status"), ["workflow_status"], unique=False)
        batch_op.create_index(
            "ix_jsonb_blob_nURkuc", [sa.text("(jsonb_blob -> 'nURkuc')")], unique=False, postgresql_using="gin"
        )
        batch_op.create_index(
            "ix_project_name",
            ["project_name"],
            unique=False,
            postgresql_ops={"project_name": "gin_trgm_ops"},
            postgresql_using="gin",
        )

    op.create_table(
        "scoring_system",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "scoring_system_name",
            postgresql.ENUM("OneToFive", "ZeroToThree", "ZeroToOne", name="scoringsystem"),
            nullable=False,
        ),
        sa.Column("minimum_score", sa.Integer(), nullable=False),
        sa.Column("maximum_score", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_scoring_system")),
    )
    op.create_table(
        "tag_types",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("purpose", sa.String(length=255), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tag_types")),
        sa.UniqueConstraint("purpose", name=op.f("uq_tag_types_purpose")),
    )
    op.create_table(
        "allocation_association",
        sa.Column("application_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("log", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("assigner_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["assessment_records.application_id"],
            name=op.f("fk_allocation_association_application_id_assessment_records"),
        ),
        sa.PrimaryKeyConstraint("application_id", "user_id", name=op.f("pk_allocation_association")),
    )
    op.create_table(
        "assessment_flag",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("application_id", sa.UUID(), nullable=True),
        sa.Column("latest_status", postgresql.ENUM("RAISED", "STOPPED", "RESOLVED", name="flagstatus"), nullable=True),
        sa.Column("latest_allocation", sa.String(), nullable=True),
        sa.Column("sections_to_flag", postgresql.ARRAY(sa.String(length=256)), nullable=True),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["assessment_records.application_id"],
            name=op.f("fk_assessment_flag_application_id_assessment_records"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_assessment_flag")),
    )
    op.create_table(
        "assessment_round",
        sa.Column("round_id", sa.UUID(), nullable=False),
        sa.Column("scoring_system_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["scoring_system_id"],
            ["scoring_system.id"],
            name=op.f("fk_assessment_round_scoring_system_id_scoring_system"),
        ),
        sa.PrimaryKeyConstraint("round_id", name=op.f("pk_assessment_round")),
    )
    op.create_table(
        "comments",
        sa.Column("comment_id", sa.UUID(), nullable=False),
        sa.Column("application_id", sa.UUID(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("date_created", sa.DateTime(), server_default=sa.text("now()"), nullable=True),
        sa.Column("sub_criteria_id", sa.String(), nullable=True),
        sa.Column("comment_type", postgresql.ENUM("COMMENT", "WHOLE_APPLICATION", name="commenttype"), nullable=True),
        sa.Column("theme_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["assessment_records.application_id"],
            name=op.f("fk_comments_application_id_assessment_records"),
        ),
        sa.PrimaryKeyConstraint("comment_id", name=op.f("pk_comments")),
    )
    op.create_table(
        "qa_complete",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("application_id", sa.UUID(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("date_created", sa.DateTime(), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["assessment_records.application_id"],
            name=op.f("fk_qa_complete_application_id_assessment_records"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_qa_complete")),
    )
    op.create_table(
        "scores",
        sa.Column("score_id", sa.UUID(), nullable=False),
        sa.Column("score", sa.Integer(), nullable=False),
        sa.Column("justification", sa.Text(), nullable=False),
        sa.Column("application_id", sa.UUID(), nullable=True),
        sa.Column("date_created", sa.DateTime(), server_default=sa.text("now()"), nullable=True),
        sa.Column("sub_criteria_id", sa.String(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["assessment_records.application_id"],
            name=op.f("fk_scores_application_id_assessment_records"),
        ),
        sa.PrimaryKeyConstraint("score_id", name=op.f("pk_scores")),
    )
    op.create_table(
        "tags",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("value", sa.String(length=255), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("type_id", sa.UUID(), nullable=False),
        sa.Column("fund_id", sa.UUID(), nullable=False),
        sa.Column("round_id", sa.UUID(), nullable=False),
        sa.Column("creator_user_id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(["type_id"], ["tag_types.id"], name=op.f("fk_tags_type_id_tag_types")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tags")),
    )
    with op.batch_alter_table("tags", schema=None) as batch_op:
        batch_op.create_index("tag_value_round_id_ix", [sa.text("lower(value)"), "round_id"], unique=True)

    op.create_table(
        "comments_update",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("comment_id", sa.UUID(), nullable=True),
        sa.Column("comment", sa.Text(), nullable=False),
        sa.Column("date_created", sa.DateTime(), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["comment_id"], ["comments.comment_id"], name=op.f("fk_comments_update_comment_id_comments")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_comments_update")),
    )
    op.create_table(
        "flag_update",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("assessment_flag_id", sa.UUID(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("date_created", sa.DateTime(), server_default=sa.text("now()"), nullable=True),
        sa.Column("justification", sa.String(), nullable=True),
        sa.Column("status", postgresql.ENUM("RAISED", "STOPPED", "RESOLVED", name="flagstatus"), nullable=True),
        sa.Column("allocation", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["assessment_flag_id"],
            ["assessment_flag.id"],
            name=op.f("fk_flag_update_assessment_flag_id_assessment_flag"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_flag_update")),
    )
    op.create_table(
        "tag_association",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("application_id", sa.UUID(), nullable=True),
        sa.Column("associated", sa.Boolean(), nullable=False),
        sa.Column("tag_id", sa.UUID(), nullable=True),
        sa.Column("user_id", sa.String(length=255), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["assessment_records.application_id"],
            name=op.f("fk_tag_association_application_id_assessment_records"),
        ),
        sa.ForeignKeyConstraint(["tag_id"], ["tags.id"], name=op.f("fk_tag_association_tag_id_tags")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tag_association")),
    )


def downgrade():
    op.drop_table("tag_association")
    op.drop_table("flag_update")
    op.drop_table("comments_update")
    with op.batch_alter_table("tags", schema=None) as batch_op:
        batch_op.drop_index("tag_value_round_id_ix")

    op.drop_table("tags")
    op.drop_table("scores")
    op.drop_table("qa_complete")
    op.drop_table("comments")
    op.drop_table("assessment_round")
    op.drop_table("assessment_flag")
    op.drop_table("allocation_association")
    op.drop_table("tag_types")
    op.drop_table("scoring_system")
    with op.batch_alter_table("assessment_records", schema=None) as batch_op:
        batch_op.drop_index("ix_project_name", postgresql_ops={"project_name": "gin_trgm_ops"}, postgresql_using="gin")
        batch_op.drop_index("ix_jsonb_blob_nURkuc", postgresql_using="gin")
        batch_op.drop_index(batch_op.f("ix_assessment_records_workflow_status"))
        batch_op.drop_index(batch_op.f("ix_assessment_records_type_of_application"))
        batch_op.drop_index(batch_op.f("ix_assessment_records_round_id"))
        batch_op.drop_index(batch_op.f("ix_assessment_records_project_name"))
        batch_op.drop_index(batch_op.f("ix_assessment_records_funding_amount_requested"))
        batch_op.drop_index(batch_op.f("ix_assessment_records_fund_id"))
        batch_op.drop_index(batch_op.f("ix_assessment_records_asset_type"))
        batch_op.drop_index("ix_application_round_fund_id")
        batch_op.drop_index(
            "ix_application_jsonb", postgresql_ops={"jsonb_blob": "jsonb_path_ops"}, postgresql_using="gin"
        )
        batch_op.drop_index("ix_application_id_hash", postgresql_using="hash")

    op.drop_table("assessment_records")
    op.execute("drop type scoringsystem")
    op.execute("drop type commenttype")
    op.execute("drop type flagstatus")

    public_pg_trgm = PGExtension(schema="public", signature="pg_trgm")
    op.drop_entity(public_pg_trgm)
